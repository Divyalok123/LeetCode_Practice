/*
https://leetcode.com/problems/minimize-malware-spread/
*/

#include <iostream>
#include <vector>
#include <algorithm>
#include <numeric>
using namespace std;

/// union-find
class Solution {
public:
    
     vector<int> size, p;
    
    int find(int a) {
        return p[a] == a ? a : p[a] = find(p[a]);
    } 
    
    void un(int a, int b) {
        int pa = find(a), pb = find(b);
        
        if(pa != pb) {
            int sa = size[pa], sb = size[pb];
            
            if(sa < sb)
                swap(pa, pb);
            
            p[pb] = pa;
            size[pa] += size[pb];            
        }
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        
        size.assign(n, 1);
        p.resize(n);
        iota(p.begin(), p.end(), 0);
        
        for(int i = 0; i < n; i++) {
            for(int j = i+1; j < n; j++) {
                if(graph[i][j])
                    un(i, j);
            }
        }
        
        vector<int> count(n);
        for(int& i: initial) {
            count[find(i)]++;
        }
        
        vector<int> save(n);
        for(int& i: initial) {
            if(count[find(i)] == 1)
                save[i] = size[find(i)];
        }
        
        int ans = -1, ind = -1;
        for(int& i: initial) {
            if(save[i] > ans || (save[i] == ans && i < ind))
                ans = save[i], ind = i;
        }
        
        return ind;
    }
};
